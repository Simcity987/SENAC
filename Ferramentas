**Prompt de Comando**
git --version - ver a versão do git
git config --global user.name "Carlos Caiado" - configurar o nome do user
git config --global user.email "carloscaiado753@gmail.com" - configurar o email do user
cls - limpar os comandos

***Git***
*Crie uma pasta*
mkdir git_local - cria uma pasta
ls - ver os conteudos da pasta
cd git_local - entra na pasta
clear - limpar os comandos
git init - inicio um repositorio
notepad - crie um arquivo
git status - verificar o status da pasta
git add nomedoarquivo - para rastrear o arquivo
git add . - ativa todos os arquivos para a área de controle de versão
git rm --chaced nomedoarquivo - remove a ultima alteração que ocorreu no arquivo
git commit -m "Alguma mensagem" -  comitar com mensagem
git log - mostra a lista de commit feitos no projeto
git log --oneline 
touch .gitignore - é um arquivo de texto que diz ao Git quais arquivos ou pastas ele deve ignorar em um projeto.
git restore - restaurar algum arquivo ou projeto
git log --graph - mostra a lista de commit feitos no projeto de forma gráfica
git log --parents
git branch - lista as branchs
git branch -v - mostra o ultimo commit que foi feito na branch
git branch nomedabranch - criar uma nova branch
git checkout nomedabranch - muda de branch

git remote add origin linkdogithub - onde o codigo será enviado;
git push - envia as atualizações para a nuvem na branch atualmente ativa;
git push --set-upstream origin nomedabranch - vai mandar os arquivos para a branch selecionada;
git reflog - historico das versões adicionados no momento atual e antiga;
git reset --hard numerodoid - muda de versão;
git merge "branch a receber merge" - unir uma branch com outra branch;
git pull - atualiza a branch atualmente ativa;
git checkout -b "nome da branch de origin" "nome da nova branch" - permite mudar e criar uma nova branch com base em outra;
touch .gitignore - utilizado para descrever ao Git tanto as pastas quanto os arquivos que a pessoa desenvolvedora deseja que sejam ignorados.
